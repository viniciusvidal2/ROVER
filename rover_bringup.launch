<launch>

    <!-- Arguments -->
    <arg name="oa_approach" default="1"/>
    <!-- For board -->
    <arg name="fcu_url" default="/dev/ttyACM0:57600"/>
    <arg name="gcs_url" default="udp://:14551@127.0.0.1:14551"/>
    <!-- For SITL -->
    <!-- <arg name="fcu_url" default="tcp://127.0.0.1:5762" />
    <arg name="gcs_url" default="tcp://127.0.0.1:5763" /> -->
    <arg name="tgt_system" default="1"/>
    <arg name="tgt_component" default="1"/>
    <arg name="log_output" default="log"/>
    <arg name="fcu_protocol" default="v2.0"/>
    <arg name="respawn_mavros" default="false"/>

    <!-- Simple transforms to adjust sonar and lidar frames -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="stf0" args="0 0 0 0 0 0 1 livox_frame base_link 100" />  -->

    <!-- Launch Mavros related node -->
	<include file="$(find mavros)/launch/node.launch">
        <arg name="pluginlists_yaml" value="$(find mig_obstacle_avoidance)/config/mavros/apm_pluginlists.yaml" />
        <arg name="config_yaml" value="$(find mig_obstacle_avoidance)/config/mavros/apm_config.yaml" />
        <arg name="fcu_url" value="$(arg fcu_url)" />
        <arg name="gcs_url" value="$(arg gcs_url)" />
        <arg name="tgt_system" value="$(arg tgt_system)" />
        <arg name="tgt_component" value="$(arg tgt_component)" />
        <arg name="log_output" value="$(arg log_output)" />
        <arg name="fcu_protocol" value="$(arg fcu_protocol)" />
        <arg name="respawn_mavros" value="$(arg respawn_mavros)" />
    </include>

    <!-- Livox sensor - mid360-->
    <include file="$(find livox_ros_driver2)/launch/rviz_MID360.launch">
        <arg name="rviz_enable" value="false"/>
    </include>

    <!-- Livox filter -->
    <rosparam command="load" file="$(find livox_filter_mig)/config/params.yaml"/>
    <node name="filter_raw_cloud_node" pkg="livox_filter_mig" type="filter_raw_cloud_node" output="screen"/>

    <!-- USB camera for herelink transmission -->
    <include file="$(find camera_transmitter)/launch/camera_transmitter.launch"/>

    <!-- Dynamixel controllers -->
    <include file="$(find dynamixel_controller)/launch/dynamixel_controller.launch"/>

    <!-- Choosing which obstacle avoidance algorithm to run based on value -->
    <node pkg="mig_obstacle_avoidance" type="obstAvoid0.py" name="obstAvoid0" if="$(eval arg('oa_approach') == 0)"/>
    <node pkg="mig_obstacle_avoidance" type="obstAvoid1p.py" name="obstAvoid1p" if="$(eval arg('oa_approach') == 1)"/>

</launch>
