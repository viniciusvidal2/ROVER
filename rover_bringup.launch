<launch>

    <!-- Arguments -->
    <arg name="SITL" default="false"/>
    <arg name="tgt_system" default="1"/>
    <arg name="tgt_component" default="1"/>
    <arg name="log_output" default="log"/>
    <arg name="fcu_protocol" default="v2.0"/>
    <arg name="respawn_mavros" default="false"/>
    <!-- <arg name="sending_t" default="0.5"/> -->
    <!-- <arg name="max_dist" default="1"/> -->
    <!-- <arg name="corridor_width" default="1.2"/> -->
    <!-- <arg name="turn_rate" default="30.0"/> -->
    <!-- <arg name="map_name" default="map_1"/> -->

    <!-- Set fcu_url and gcs_url based on SITL flag -->
    <arg unless="$(arg SITL)" name="fcu_url" default="/dev/ttyACM0:57600"/>
    <arg unless="$(arg SITL)" name="gcs_url" default="udp://:14551@127.0.0.1:14551"/>
    <arg if="$(arg SITL)" name="fcu_url" default="tcp://127.0.0.1:5762"/>
    <arg if="$(arg SITL)" name="gcs_url" default="tcp://127.0.0.1:5763"/>
    
    <!-- Launch Mavros related params and node -->
	<include file="$(find mavros)/launch/node.launch">
        <arg name="pluginlists_yaml" value="$(find vehicle_params)/config/apm_pluginlists.yaml" />
        <arg name="config_yaml" value="$(find vehicle_params)/config/apm_config.yaml" />
        <arg name="fcu_url" value="$(arg fcu_url)" />
        <arg name="gcs_url" value="$(arg gcs_url)" />
        <arg name="tgt_system" value="$(arg tgt_system)" />
        <arg name="tgt_component" value="$(arg tgt_component)" />
        <arg name="log_output" value="$(arg log_output)" />
        <arg name="fcu_protocol" value="$(arg fcu_protocol)" />
        <arg name="respawn_mavros" value="$(arg respawn_mavros)" />
    </include>

    <!-- Load vehicle parameters -->
    <rosparam command="load" file="$(find vehicle_params)/config/params.yaml"/>

    <!-- Launch driver nodes if not running SITL simulation -->
    <group unless="$(arg SITL)">
        <!-- Livox sensor - mid360-->
        <!-- <include file="$(find livox_ros_driver2)/launch/msg_MID360.launch">
            <arg name="rviz_enable" value="false"/>
        </include> -->

        <!-- USB camera for herelink transmission -->
        <!-- <include file="$(find camera_transmitter)/launch/camera_transmitter.launch"/> -->

        <!-- Insta360 camera for 360 degree view -->
        <!-- <include file="$(find camera_transmitter)/launch/insta360.launch"/> -->

        <!-- Dynamixel controllers -->
        <!-- <include file="$(find dynamixel_controller)/launch/dynamixel_controller.launch"/> -->

        <!-- ROSBridge for communication with web interface -->
        <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch"/>
    </group>

    <!-- Preprocess Livox scans -->
    <!-- <rosparam command="load" file="$(find ptc_scan_processing)/config/params.yaml"/>
    <node name="preprocess_lidar_scan_node" pkg="ptc_scan_processing" type="preprocess_lidar_scan_node" output="screen"/> -->

    <!-- FAST LIO for lidar odometry and mapping -->
    <!-- <include file="$(find fast_lio)/launch/mapping_mid360.launch">
        <arg name="rviz" value="false"/>
    </include> -->

    <!-- Localization node and parameters -->
    <!-- <rosparam command="load" file="$(find localization)/config/params.yaml"/>
    <param name="map_data/home_relative_path" value="maps"/>
    <param name="map_data/map_name" value="$(arg map_name)"/>
    <node pkg="localization" type="localization_node" name="localization_node" output="screen"/> -->

    <!-- Mapping node and parameters -->
    <!-- <rosparam command="load" file="$(find mapping)/config/params.yaml"/>
    <param name="map_data/save_relative_path" value="maps"/>
    <param name="map_data/map_name" value="$(arg map_name)"/>
    <node pkg="mapping" type="map_data_save_node" name="mapping_node" output="screen"/> -->

    <!-- Generate obstacles point cloud and convert to laser scan format message for obstacle avoidance logic node -->
    <!-- <node pkg="localization" type="obstacle_generator_node" name="obstacle_generator_node" output="screen"/>
    <node name="convert_ptc_laserscan_node" pkg="ptc_scan_processing" type="convert_ptc_laserscan_node" output="screen"/> -->

    <!-- Obstacle avoidance algorithm -->
    <!-- <node pkg="obstacle_avoidance" type="obstacle_avoidance_sc_node.py" name="obstacle_avoidance_sc_node">
        <param name="sending_t" value="$(arg sending_t)"/>
        <param name="max_dist" value="$(arg max_dist)"/>
        <param name="corridor_width" value="$(arg corridor_width)"/>
        <param name="turn_rate" value="$(arg turn_rate)"/>
    </node> -->
    <!-- <node pkg="dwa_obstacle_avoidance" type="obstacle_avoidance_fuzzy.py" name="obstacle_avoidance_fuzzy"/> -->

</launch>
